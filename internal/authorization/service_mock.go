// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen --source=service.go -destination=service_mock.go -package=authorization -mock_names Service=MockService
//

// Package authorization is a generated GoMock package.
package authorization

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CanReadFlow mocks base method.
func (m *MockService) CanReadFlow(ctx context.Context, licenseID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanReadFlow", ctx, licenseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanReadFlow indicates an expected call of CanReadFlow.
func (mr *MockServiceMockRecorder) CanReadFlow(ctx, licenseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanReadFlow", reflect.TypeOf((*MockService)(nil).CanReadFlow), ctx, licenseID)
}

// CanWriteToFlow mocks base method.
func (m *MockService) CanWriteToFlow(ctx context.Context, licenseID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanWriteToFlow", ctx, licenseID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanWriteToFlow indicates an expected call of CanWriteToFlow.
func (mr *MockServiceMockRecorder) CanWriteToFlow(ctx, licenseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanWriteToFlow", reflect.TypeOf((*MockService)(nil).CanWriteToFlow), ctx, licenseID)
}
